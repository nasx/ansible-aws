---
- name: Create Application Instances & Associated Components
  hosts: localhost
  tasks:
    - name: Get VPC Facts
      ec2_vpc_net_facts:
        filters:
          "tag:Name": "{{ app_name }}-vpc"
        region: "{{ region }}"
      register: ec2_vpc_net_facts_results

    - name: Debug ec2_vpc_net_facts_results
      debug:
        var: ec2_vpc_net_facts_results
        verbosity: 2

    - name: Get VPC Subnet Facts
      ec2_vpc_subnet_facts:
        filters:
          vpc-id: "{{ ec2_vpc_net_facts_results.vpcs[0].id }}"
        region: "{{ region }}"
      register: ec2_vpc_subnet_facts_results

    - name: Debug ec2_vpc_subnet_facts_results
      debug:
        var: ec2_vpc_subnet_facts_results
        verbosity: 2

    - name: Combine Subnet Names & IDs Into Dictionary For Easy Lookup
      set_fact:
        subnet_name_id_dict: "{{ subnet_name_id_dict | default({}) | combine( { item.tags.Name: item.subnet_id } ) }}"
      with_items:
        - "{{ ec2_vpc_subnet_facts_results.subnets }}"

    - name: Debug subnet_name_id_dict
      debug:
        var: subnet_name_id_dict
        verbosity: 2

    - name: Create Instance(s) in EC2
      ec2_instance:
        region: "{{ region }}"
        state: started
        key_name: "{{ ssh_key_name }}"
        instance_type: "{{ item.type }}"
        image_id: "{{ item.ami }}"
        vpc_subnet_id: "{{ subnet_name_id_dict[app_name + '-' + item.subnet] }}"
        security_group: "{{ app_name }}-security-group"
        name: "{{ item.name }}.{{ app_name }}.{{ dns_zone }}"
        network:
          assign_public_ip: true
        tags:
          Role: "{{ item.role }}"
        wait: no
      register: ec2_instance_results
      with_items:
        - "{{ instances }}"

    - name: Debug ec2_instance_results
      debug:
        var: ec2_instance_results
        verbosity: 2

    - name: Set my_instances
      set_fact:
        my_instances: "{{ ec2_instance_results.results | map(attribute='instances') | flatten }}"
    
    - name: Debug my_instances
      debug:
        var: my_instances
        verbosity: 2
    
    - name: Gather Instance Facts
      ec2_instance_facts:
        region: "{{ region }}"
        filters:
          instance-id: "{{ item.instance_id }}"
      register: ec2_instance_facts_results
      with_items:
        - "{{ my_instances }}"
    
    - name: Debug ec2_instance_facts_results
      debug:
        var: ec2_instance_facts_results
        verbosity: 2
    
    - name: Set my_instance_facts
      set_fact:
        my_instance_facts: "{{ ec2_instance_facts_results.results | map(attribute='instances') | flatten }}"
    
    - name: Debug my_instance_facts
      debug:
        var: my_instance_facts
        verbosity: 2

    - name: Create DNS Entries in Route53
      route53:
        state: create
        zone: "{{ dns_zone }}"
        record: "{{ item.tags.Name }}."
        type: A
        value: "{{ item.public_ip_address }}"
      with_items:
        - "{{ my_instance_facts }}"
    
    - name: Populate elb_subnet_ids
      set_fact:
        elb_subnet_ids: "{{ elb_subnet_ids | default([]) }} + [ '{{ item.subnet_id }}' ]"
      with_items: "{{ my_instance_facts }}"
      when: item.tags.Role == "tomcat"
    
    - name: Debug elb_subnet_ids
      debug:
        var: elb_subnet_ids
        verbosity: 2
    
    - name: Create ELB
      ec2_elb_lb:
        name: "{{ app_name }}-elb"
        region: "{{ region }}"
        state: present
        subnets: "{{ elb_subnet_ids }}"
        security_group_names: "{{ app_name }}-security-group"
        connection_draining_timeout: 5
        listeners:
          - protocol: http
            load_balancer_port: 8080
            instance_port: 8080
        health_check:
          ping_protocol: http
          ping_port: 8080
          ping_path: /monitor.html
          response_timeout: 5
          interval: 15
          unhealthy_threshold: 2
          healthy_threshold: 2
      register: my_elb
    
    - name: Debug my_elb
      debug:
        var: my_elb
        verbosity: 2

    - name: Add Instances to ELB
      ec2_elb:
        ec2_elbs: "{{ app_name }}-elb"
        region: "{{ region }}"
        state: present
        wait: no
        instance_id: "{{ item.instance_id }}"
      with_items:
        - "{{ my_instance_facts }}"
    
    - name: Create ELB Alias
      route53:
        state: present
        zone: "{{ dns_zone }}"
        record: "app.{{ app_name }}.{{ dns_zone }}."
        type: A
        value: "{{ my_elb.elb.hosted_zone_name }}"
        alias: true
        alias_hosted_zone_id: "{{ my_elb.elb.hosted_zone_id }}"
        overwrite: yes
